@name Holo Model Loader by Naki
@persist [HT CT Bones]:table [SpawnStatus CoreStatus]:string [HN CN I SpawnCounter] DeparentUs:array
#Original pac to holo code by Shadowscion
#Thanks to them for creating the base code

if(dupefinished()){reset()}
if(first()){
    #[
        -Introduction.
        
        This is a concept of a holo rig with stored indexes for later use in the code
        By Naki and Shadowscion (Base code)
        
        
        -Usage.
        
        Here is the code format to be used, this also means you have to change the output you get from pac3 to fit this
        but that should be easily done due to the start being the only part that differs
        
        
        #I++, HN++, HT[HN,array] = array(INDEX, PARENTINDEX, noentity(), UNUSEDNUMBER, POSITION, ANGLE, SCALE, MODEL, MATERIAL, COLOR, SKIN, FULLBRIGHT)
        #Model Code ^^
        
        #I++, HN++, HT[HN,array] = array(INDEX, PARENTINDEX, HOLOPARENTENTITY/noentity(), UNUSEDNUMBER, POSITION, ANGLE, SCALE),Bones["BoneName",number]=I
        #Bone Code ^^
        
        
        -Changelog.
        
        Ver. 3.0 - Changed from hundreds of variables to a single table that stores the bone indexes
        
        Ver. 2.0 - Added the entire "indexing" system and pac3 to holo conversion testing
        
        Ver. 1.0 - Initial idea and creation from Shadowscion's code
        
    ]#
    ShowBones=1
    #Set this to 0 to hide the rig
    ListBones=0
    #Set this to 1 to print all bones to chat
    
    #-- Rig Creation
    
    #S stores the first index of the rig holos
    S=I=1, HN++, HT[HN,array] = array(I, entity(), noentity(), 0, vec(0, 0, 25), ang(0, 0, 0), ShowBones),Bones["Root",number]=I
    I++, HN++, HT[HN,array] = array(I, Bones["Root",number], noentity(), 0, vec(0, 0, 15), ang(0, 0, 0), ShowBones),Bones["NewBone",number]=I
    #I stores the last index of the rig holos
    
    #!!!this code should be where your bone creation ends!!!
    for(HoloIndex=S,I){     #Creates holos with indexes between first and last rig holo
        holoCreate(I)       #Should you use holoparenting this will fix everything, just don't exceed the amount of holos you can create
    }
    #!!!this code should be where your bone creation ends!!!
    
    
    #-- Model Creation
    
    I++, HN++, HT[HN,array] = array(I, Bones["Root",number], noentity(), 0, vec(25, 0, 0), ang(0, 0, 0), 1, "sphere", "models/XQM/PoleX1_diffuse", vec4(255,255,0,255), 0, 0)
    
    I++, HN++, HT[HN,array] = array(I, Bones["NewBone",number], noentity(), 0, vec(25, 0, 0), ang(0, 0, 0), 1, "sphere", "models/XQM/PoleX1_diffuse", vec4(0,255,255,255), 0, 0)
    
    
    if(ListBones){
        hint("Bones printed to chat!",7)
        printTable(Bones)
    }
    function array:holo() {
        local Index = This[1, number]
        Entity = This[2,entity]:isValid() ? This[2,entity] : (holoEntity(This[2,number]):isValid() ? holoEntity(This[2,number]) : entity())
        
        if(holoEntity(Index):isValid()){
            holoPos(Index, Entity:toWorld(This[5, vector]))
            holoAng(Index, Entity:toWorld(This[6, angle]))
            holoScale(Index, This[7, number] ? vec(This[7, number]) : This[7, vector])
        }else{
            holoCreate(Index, Entity:toWorld(This[5, vector]), This[7, number] ? vec(This[7, number]) : This[7, vector], Entity:toWorld(This[6, angle]))
        }
        holoParent(Index, Entity)
        if(This:exists(8)){
            holoModel(Index, This[8, string])
            holoMaterial(Index, This[9, string])
            holoColor(Index, This[10, vector4])
            holoSkin(Index, This[11, number])
            holoDisableShading(Index, This[12, number])
        }
        if(This[3,entity]:isValid() && This[3,entity] != noentity()){
            holoPos(Index,This[3,entity]:pos())
            holoAng(Index,This[3,entity]:angles())
            This[3,entity]:parentTo(holoEntity(Index))
            This[3,entity]:setAlpha(0)
            holoPos(Index,Entity:toWorld(This[5, vector]))
            holoAng(Index,Entity:toWorld(This[6, angle]))
            DeparentUs:pushEntity(This[3,entity])
        }
    }

    #- Clip a hologram from data array
    function array:clip() {
        holoClipEnabled(This[1, number], This[2, number], 1)
        holoClip(This[1, number], This[2, number], This[3, vector], This[4, vector], 0)
    }

    #- Load the contraption
    function loadContraption() {
        switch (SpawnStatus) {
            case "InitSpawn",
                if (clk("Start")) {
                    SpawnStatus = "LoadHolograms"
                }
            break

            case "LoadHolograms",
                while (perf() & holoCanCreate() &  SpawnCounter < HN) {
                    SpawnCounter++
                    HT[SpawnCounter, array]:holo()

                    if (SpawnCounter >= HN) {
                        SpawnStatus = CN > 0 ? "LoadClips" : "PrintStatus"
                        SpawnCounter = 0
                        break
                    }
                }
            break

            case "LoadClips",
                while (perf() & SpawnCounter < CN) {
                    SpawnCounter++
                    CT[SpawnCounter, array]:clip()

                    if (SpawnCounter >= CN) {
                        SpawnStatus = "PrintStatus"
                        SpawnCounter = 0
                        break
                    }
                }
            break

            case "PrintStatus",
                printColor( vec(222,37,188), "Holo Loader 3.0: ", vec(255,255,255), "Loaded " + HN + " holograms and " + CN + " clips." )

                HT:clear()
                CT:clear()

                CoreStatus = "InitPostSpawn"
                SpawnStatus = ""
            break
        }
    }
    runOnTick(1)
    timer("Start", 500)
    CoreStatus = "InitSpawn"
    SpawnStatus = "InitSpawn"
}elseif (CoreStatus == "InitSpawn") {
    loadContraption()
}elseif (CoreStatus == "InitPostSpawn") {
    #- This is your "if (first())" section of the code.
    runOnTick(0)
    timer("int",50)
    CoreStatus = "CodeRun"
}elseif(clk("int")){
    timer("int",50)
    #You can call for the "entity:parent()" entity or
    holoAng(Bones["Root",number],holoEntity(Bones["Root",number]):parent():toWorld(ang(0,systime()*90,0)))
    #You can use a listed bone, in this case "Root"
    holoAng(Bones["NewBone",number],holoEntity(Bones["Root",number]):toWorld(ang(0,systime()*45,0)))
}
